name: Build and Deploy to Server

# Trigger the workflow on pushes to the main branch
on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    name: Build and Deploy
    # Use the latest Ubuntu runner
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout the repository code
      - name: Checkout Code
        uses: actions/checkout@v4

      # 2. Set up Node.js environment
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20' # Specify your Node.js version
          cache: 'npm'       # Enable caching for npm dependencies

      # 3. Install project dependencies
      - name: Install Dependencies
        run: npm install

      # 4. Build the application
      - name: Build Project
        run: npm run build # This executes "vite build"

      # 5. Verify the build output to prevent deploying an empty folder
      - name: Verify Build Output
        run: |
          if [ ! -d "dist" ] || [ -z "$(ls -A dist)" ]; then
            echo "Build verification failed: 'dist' directory is empty or does not exist."
            exit 1
          fi
          echo "Build output verified."

      # 6. Package the build output into a zip file
      - name: Package Build Artifacts
        run: zip -r dist.zip dist

      # 7. Copy build archive to server
      - name: Copy package to server
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "dist.zip"
          target: "/tmp" # Copy to a temporary directory

      # 8. Deploy on server with verification
      - name: Deploy and Verify on Server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "dist.zip"
          target: "/tmp"

      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY_CI }}
          script: /home/deploy/restricted-deploy.sh dist.zip